import axios from 'axios'
import { jsPDF } from 'jspdf'
import { consumerSocket } from '..'
import dotenv from 'dotenv'

dotenv.config()
// plotly does not have a typescript definition file so we have to use require - with more time I would have created a definition file
const plotly = require('plotly')(
  process.env.PLOTLY_USERNAME,
  process.env.PLOTLY_API_KEY
)

// response structure from binance candlestick api
type BinanceCandlestickResponse = [
  openTime: number,
  open: string,
  high: string,
  low: string,
  close: string,
  volume: string,
  closeTime: number,
  quoteAssetVolume: string,
  numberOfTrades: number,
  takerBuyBaseAssetVolume: string,
  takerBuyQuoteAssetVolume: string,
  ignore: string
][]

// fetch candlestick data from binance api
export const getCandleStickDataFromBinance = async ({
  asset,
  interval,
}: {
  asset: string
  interval: string
}) => {
  let response: any
  try {
    response = await axios.get(
      `https://data.binance.com/api/v3/klines?symbol=${asset}USDT&interval=${interval}&limit=15`
    )
  } catch (error) {
    console.log(
      'ðŸš€ ~ file: queue.ts:46 ~ coincapGetCandlestickData ~ error:',
      error
    )
    response = null
  }
  return response ? (response.data as BinanceCandlestickResponse) : null
}

// transform data to candlestick format expected by plotly
export const transformDataToCandlestickFormat = (
  data: BinanceCandlestickResponse
) => {
  const candlestickData = data.map((candle) => {
    return {
      x: new Date(candle[0]),
      y: [candle[1], candle[2], candle[3], candle[4]],
      type: 'box',
    }
  })
  return candlestickData
}

// use plotly to create a chart online - the chart is painted on their server and is then deployed to a public url
export const paintChart = async (
  data: { x: Date; y: string[]; type: string }[]
) => {
  var layout = {
    yaxis: {
      title: 'High Low Open Close',
      zeroline: true,
    },
    boxmode: 'group',
    fileopt: 'overwrite',
    filename: 'crypto-candlestick',
  }

  await plotly.plot(data, layout, (err: any, msg: any) => {
    try {
      console.log(msg)
    } catch (error) {
      console.log(error)
    }
  })
}
// get the chart figure generated by plotly and then convert it to an image
export const getChartImage = async () => {
  plotly.getFigure('jonandereg', '4', async (err: any, fig: any) => {
    try {
      const imageOpts = { format: 'png', width: 1000, height: 500 }
      plotly.getImage(
        fig,
        imageOpts,
        async function (error: any, imageStream: any) {
          try {
            processImageStream(imageStream)
          } catch (error) {
            console.log(error)
          }
        }
      )
    } catch (error) {
      console.log(error)
    }
  })
}

// convert the image stream to a buffer and then convert the buffer to a pdf data uri string and send it to the client via socket
const processImageStream = (imageStream: any) => {
  const buffer: any[] | Uint8Array[] = []
  imageStream.on('data', (chunk: any) => {
    buffer.push(chunk)
  })

  imageStream.on('end', async () => {
    const file = Buffer.concat(buffer)
    const pdf = await createPdf(file)
    consumerSocket.emit('message', pdf.output('datauristring'))

    console.log('pdf created')
  })
}
// create a pdf from the image buffer
const createPdf = async (file: Buffer) => {
  const pdf = new jsPDF()

  pdf.addImage(file.toString('base64'), 'PNG', 0, 0, 210, 100)
  return pdf
}
